// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // e.g. file:./dev.db
}

/**
 * ===================== Enums =====================
 */

enum Role {
  TANK
  HEALER
  MDPS
  RDPS
}

enum ArmorType {
  CLOTH
  LEATHER
  MAIL
  PLATE
}

enum LootType {
  ACCESSORIES
  CLOTH
  LEATHER
  MAIL
  PLATE
  TIER_SET
  TRINKET
  WEAPON
}

enum AuditAction {
  SR_CHOICE_SET
  BOSS_KILL_TOGGLED
  SR_LOCKED
  SR_UNLOCKED
  SR_UNLOCKED_EXCEPT_KILLED
  WEEK_RESET
  INVITE_CLAIMED
  PLAYER_DEACTIVATED
  PLAYER_REACTIVATED
}

enum TargetType {
  SR_CHOICE
  BOSS_KILL
  WEEK
  PLAYER
}

/**
 * ===================== Models =====================
 */

model Raid {
  id   Int    @id @default(autoincrement())
  name String @unique

  bosses Boss[]
  weeks  Week[]
}

model Week {
  id        Int      @id @default(autoincrement())
  raidId    Int
  raid      Raid     @relation(fields: [raidId], references: [id])
  label     String   @unique
  startDate DateTime @default(now())

  sRChoices SRChoice[]
  bossKills BossKill[]
  sRLogs    SRLog[]

  @@index([raidId])
}

model Class {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  armorType  ArmorType
  tierPrefix String

  players Player[]
}

model Player {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  role    Role
  active  Boolean @default(true) // soft-hide instead of deleting
  classId Int
  class   Class   @relation(fields: [classId], references: [id])

  srChoices SRChoice[]
  sRLogs    SRLog[]
}

model Boss {
  id     Int    @id @default(autoincrement())
  name   String
  raidId Int
  raid   Raid   @relation(fields: [raidId], references: [id])

  lootDrops LootDrop[]
  bossKills BossKill[]
  sRChoices SRChoice[] // <-- inverse side for SRChoice.boss

  @@unique([raidId, name])
  @@index([raidId])
}

model LootItem {
  id   Int      @id @default(autoincrement())
  name String
  type LootType
  slot String?

  lootDrops LootDrop[]
  sRChoices SRChoice[]
  sRLogs    SRLog[]

  @@index([type])
  @@index([name])
}

model LootDrop {
  lootItemId Int
  bossId     Int

  lootItem LootItem @relation(fields: [lootItemId], references: [id])
  boss     Boss     @relation(fields: [bossId], references: [id])

  @@id([lootItemId, bossId])
  @@index([bossId])
}

model SRChoice {
  id         Int      @id @default(autoincrement())
  weekId     Int
  playerId   Int
  lootItemId Int? // optional by design
  bossId     Int? // optional by design
  isTier     Boolean  @default(false)
  locked     Boolean  @default(false)
  notes      String?
  updatedAt  DateTime @updatedAt

  week     Week      @relation(fields: [weekId], references: [id])
  player   Player    @relation(fields: [playerId], references: [id])
  lootItem LootItem? @relation(fields: [lootItemId], references: [id]) // <-- optional
  boss     Boss?     @relation(fields: [bossId], references: [id]) // <-- optional

  @@unique([weekId, playerId])
  @@index([weekId])
  @@index([playerId])
  @@index([lootItemId])
  @@index([bossId])
}

model BossKill {
  id     Int     @id @default(autoincrement())
  weekId Int
  bossId Int
  killed Boolean @default(false)

  week Week @relation(fields: [weekId], references: [id])
  boss Boss @relation(fields: [bossId], references: [id])

  @@unique([weekId, bossId])
  @@index([weekId])
  @@index([bossId])
}

model SRLog {
  id         Int      @id @default(autoincrement())
  weekId     Int
  playerId   Int
  lootItemId Int
  isTier     Boolean  @default(false)
  notes      String?  // enforce 128 in app (SQLite doesnâ€™t honor varchar length)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  week     Week     @relation(fields: [weekId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])
  lootItem LootItem @relation(fields: [lootItemId], references: [id])

  @@unique([weekId, playerId]) // one SR per player per week
  @@index([weekId])
  @@index([playerId])
  @@index([lootItemId])
  @@index([createdAt])
}

model AuditLog {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  actorUserId  Int?
  actorDisplay String?
  action       AuditAction
  targetType   TargetType
  targetId     String
  raidId       Int?
  weekId       Int?
  before       Json?
  after        Json?
  meta         Json?

  @@index([weekId, createdAt, id])
  @@index([action, createdAt])
}
